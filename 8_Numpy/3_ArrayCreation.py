# -*- coding: utf-8 -*-
"""
Created on Sat Jun 23 20:56:44 2018

@author: SilverDoe
"""

'''

>> numpy.empty(shape,dtype,order) : It creates an uninitialized array of specified shape and dtype.
>> numpy.zeros(shape, dtype, order) : Returns a new array of specified size, filled with zeros.
>> numpy.ones(shape, dtype, order) : Returns a new array of specified size and type, filled with ones.
   

'''
# an empty array
import numpy as np 
x = np.empty([3,2], dtype = int) 
print(x)

# array of five zeros. Default dtype is float 
import numpy as np 
x = np.zeros(5) 
print(x)

# array of five ones. Default dtype is float 
import numpy as np 
x = np.ones(5) 
print(x)


'''

numpy.asarray(a, dtype = None, order = None) :
============================================
 This function is similar to numpy.array except for the fact that it has fewer parameters.
 This routine is useful for converting Python sequence into ndarray.

Parameters :
=============

1. a : Input data in any form such as list, list of tuples, tuples, tuple of tuples or tuple of lists.

2. dtype : By default, the data type of input data is applied to the resultant ndarray.

3. order : C (row major) or F (column major). C is default.



numpy.frombuffer(buffer, dtype = float, count = -1, offset = 0) :
=================================================================
This function interprets a buffer as one-dimensional array. Any object that exposes
 the buffer interface is used as parameter to return an ndarray.
 
Parameters :
============

1. buffer : Any object that exposes buffer interface

2. dtype : Data type of returned ndarray. Defaults to float

3. count : The number of items to read, default -1 means all data

4. offset : The starting position to read from. Default is 0


numpy.fromiter(iterable, dtype, count = -1) : 
=============================================

1. iterable : Any iterable object

2. dtype : Data type of resultant array

3. count : The number of items to be read from iterator. Default is -1 which means
 all data to be read.
    

'''

# array from list
import numpy as np 

x = [1,2,3] 
a = np.asarray(x) 
print(a)

# array rom buffer
import numpy as np 
s = 'Hello World' 
a = np.frombuffer(s, dtype = 'S1') 
print(a)


# obtain iterator object from list 
import numpy as np 
list = range(5) 
it = iter(list)  
# use iterator to create ndarray 
x = np.fromiter(it, dtype = float) 
print(x)



'''

numpy.arange(start, stop, step, dtype) : 
========================================

This function returns an ndarray object containing evenly spaced values within a given range. 


'''

import numpy as np 
x = np.arange(5) 
print(x)


import numpy as np 
# dtype set 
x = np.arange(5, dtype = float)
print(x)

# start and stop parameters set 
import numpy as np 
x = np.arange(10,20,2) 
print(x)





# linespace
import numpy as np 
x = np.linspace(10,20, 5, endpoint = False) 
print(x)

# set base of log space to 2 
import numpy as np 
a = np.logspace(1,10,num = 10, base = 2) 
print(a)






'''================= Generating random numbers ================================

Pseudo-random number generators work by performing some operation on a value. Generally
 this value is the previous number generated by the generator. However, the first time 
 you use the generator, there is no previous value.
 
 
 Seeding a pseudo-random number generator gives it its first "previous" value. Each seed
 value will correspond to a sequence of generated values for a given random number generator.
 That is, if you provide the same seed twice, you get the same sequence of numbers twice.
 
 Generally, you want to seed your random number generator with some value that will change
 each execution of the program. For instance, the current time is a frequently-used seed. 
 The reason why this doesn't happen automatically is so that if you want, you can provide
 a specific seed to get a known sequence of numbers.
 
 
 
rand(d0, d1, ..., dn)	                  Random values in a given shape.
randn(d0, d1, ..., dn)	               Return a sample (or samples) from the “standard normal” distribution.
randint(low[, high, size, dtype])	      Return random integers from low (inclusive) to high (exclusive).
random_integers(low[, high, size])	      Random integers of type np.int between low and high, inclusive.
random_sample([size])	                  Return random floats in the half-open interval [0.0, 1.0).
random([size])	                        Return random floats in the half-open interval [0.0, 1.0).
ranf([size])                           Return random floats in the half-open interval [0.0, 1.0).
sample([size])	                        Return random floats in the half-open interval [0.0, 1.0).
choice(a[, size, replace, p])	        Generates a random sample from a given 1-D array
bytes(length)	                        Return random bytes.
 
 
'''

import random

random.seed(9001)

# randint(numbers,limit)
random.randint(1, 10)
random.randint(1, 10)
random.randint(1, 10)
random.randint(1, 10)
random.randint(1, 10)

nnum = np.random.randn(10000)
len(nnum)



import numpy as np
  
# 1D Array
array = np.random.randn(5)
print("1D Array filled with random values : \n", array)


# 2D Array   
array = np.random.randn(3, 4)
print("2D Array filled with random values : \n", array)


# 3D Array     
array = np.random.randn(2, 2 ,2)
print("3D Array filled with random values : \n", array)
































